#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'bolt_types'

module Concord
  module Thrift
    module BoltMetricsService
      class Client
        include ::Thrift::Client

        def gauge(name, val)
          send_gauge(name, val)
          recv_gauge()
        end

        def send_gauge(name, val)
          send_message('gauge', Gauge_args, :name => name, :val => val)
        end

        def recv_gauge()
          result = receive_message(Gauge_result)
          raise result.e unless result.e.nil?
          return
        end

        def timer(name, duration)
          send_timer(name, duration)
          recv_timer()
        end

        def send_timer(name, duration)
          send_message('timer', Timer_args, :name => name, :duration => duration)
        end

        def recv_timer()
          result = receive_message(Timer_result)
          raise result.e unless result.e.nil?
          return
        end

        def histogram(name, measure)
          send_histogram(name, measure)
          recv_histogram()
        end

        def send_histogram(name, measure)
          send_message('histogram', Histogram_args, :name => name, :measure => measure)
        end

        def recv_histogram()
          result = receive_message(Histogram_result)
          raise result.e unless result.e.nil?
          return
        end

        def sum(name, counter)
          send_sum(name, counter)
          recv_sum()
        end

        def send_sum(name, counter)
          send_message('sum', Sum_args, :name => name, :counter => counter)
        end

        def recv_sum()
          result = receive_message(Sum_result)
          raise result.e unless result.e.nil?
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_gauge(seqid, iprot, oprot)
          args = read_args(iprot, Gauge_args)
          result = Gauge_result.new()
          begin
            @handler.gauge(args.name, args.val)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'gauge', seqid)
        end

        def process_timer(seqid, iprot, oprot)
          args = read_args(iprot, Timer_args)
          result = Timer_result.new()
          begin
            @handler.timer(args.name, args.duration)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'timer', seqid)
        end

        def process_histogram(seqid, iprot, oprot)
          args = read_args(iprot, Histogram_args)
          result = Histogram_result.new()
          begin
            @handler.histogram(args.name, args.measure)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'histogram', seqid)
        end

        def process_sum(seqid, iprot, oprot)
          args = read_args(iprot, Sum_args)
          result = Sum_result.new()
          begin
            @handler.sum(args.name, args.counter)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'sum', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Gauge_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        VAL = 2

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          VAL => {:type => ::Thrift::Types::I64, :name => 'val'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Gauge_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Timer_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        DURATION = 2

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          DURATION => {:type => ::Thrift::Types::I64, :name => 'duration'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Timer_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Histogram_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        MEASURE = 2

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          MEASURE => {:type => ::Thrift::Types::I64, :name => 'measure'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Histogram_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Sum_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        COUNTER = 2

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          COUNTER => {:type => ::Thrift::Types::I64, :name => 'counter'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Sum_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
