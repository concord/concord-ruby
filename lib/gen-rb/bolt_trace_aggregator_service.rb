#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'bolt_types'

module Concord
  module Thrift
    module BoltTraceAggregatorService
      class Client
        include ::Thrift::Client

        def submitSpans(span)
          send_submitSpans(span)
          recv_submitSpans()
        end

        def send_submitSpans(span)
          send_message('submitSpans', SubmitSpans_args, :span => span)
        end

        def recv_submitSpans()
          result = receive_message(SubmitSpans_result)
          raise result.e unless result.e.nil?
          return
        end

        def getTrace(traceId)
          send_getTrace(traceId)
          return recv_getTrace()
        end

        def send_getTrace(traceId)
          send_message('getTrace', GetTrace_args, :traceId => traceId)
        end

        def recv_getTrace()
          result = receive_message(GetTrace_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTrace failed: unknown result')
        end

        def getTraceIds(startId, limit)
          send_getTraceIds(startId, limit)
          return recv_getTraceIds()
        end

        def send_getTraceIds(startId, limit)
          send_message('getTraceIds', GetTraceIds_args, :startId => startId, :limit => limit)
        end

        def recv_getTraceIds()
          result = receive_message(GetTraceIds_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTraceIds failed: unknown result')
        end

        def consolidateTraceIds(traceIds)
          send_consolidateTraceIds(traceIds)
          recv_consolidateTraceIds()
        end

        def send_consolidateTraceIds(traceIds)
          send_message('consolidateTraceIds', ConsolidateTraceIds_args, :traceIds => traceIds)
        end

        def recv_consolidateTraceIds()
          result = receive_message(ConsolidateTraceIds_result)
          raise result.e unless result.e.nil?
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_submitSpans(seqid, iprot, oprot)
          args = read_args(iprot, SubmitSpans_args)
          result = SubmitSpans_result.new()
          begin
            @handler.submitSpans(args.span)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'submitSpans', seqid)
        end

        def process_getTrace(seqid, iprot, oprot)
          args = read_args(iprot, GetTrace_args)
          result = GetTrace_result.new()
          begin
            result.success = @handler.getTrace(args.traceId)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'getTrace', seqid)
        end

        def process_getTraceIds(seqid, iprot, oprot)
          args = read_args(iprot, GetTraceIds_args)
          result = GetTraceIds_result.new()
          begin
            result.success = @handler.getTraceIds(args.startId, args.limit)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'getTraceIds', seqid)
        end

        def process_consolidateTraceIds(seqid, iprot, oprot)
          args = read_args(iprot, ConsolidateTraceIds_args)
          result = ConsolidateTraceIds_result.new()
          begin
            @handler.consolidateTraceIds(args.traceIds)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'consolidateTraceIds', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class SubmitSpans_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SPAN = 1

        FIELDS = {
          SPAN => {:type => ::Thrift::Types::LIST, :name => 'span', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Concord::Thrift::Span}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SubmitSpans_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetTrace_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TRACEID = 1

        FIELDS = {
          TRACEID => {:type => ::Thrift::Types::I64, :name => 'traceId'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetTrace_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Concord::Thrift::Span}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetTraceIds_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STARTID = 1
        LIMIT = 2

        FIELDS = {
          STARTID => {:type => ::Thrift::Types::I64, :name => 'startId', :default => 0},
          LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit', :default => 100}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetTraceIds_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ConsolidateTraceIds_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TRACEIDS = 1

        FIELDS = {
          TRACEIDS => {:type => ::Thrift::Types::LIST, :name => 'traceIds', :element => {:type => ::Thrift::Types::I64}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ConsolidateTraceIds_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
