#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'mutable_ephemeral_state_service'
require 'bolt_types'

module Concord
  module Thrift
    module BoltProxyService
      class Client < ::Concord::Thrift::MutableEphemeralStateService::Client 
        include ::Thrift::Client

        def registerRichStream(r)
          send_registerRichStream(r)
          return recv_registerRichStream()
        end

        def send_registerRichStream(r)
          send_message('registerRichStream', RegisterRichStream_args, :r => r)
        end

        def recv_registerRichStream()
          result = receive_message(RegisterRichStream_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerRichStream failed: unknown result')
        end

        def deregisterRichStream(r)
          send_deregisterRichStream(r)
          return recv_deregisterRichStream()
        end

        def send_deregisterRichStream(r)
          send_message('deregisterRichStream', DeregisterRichStream_args, :r => r)
        end

        def recv_deregisterRichStream()
          result = receive_message(DeregisterRichStream_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deregisterRichStream failed: unknown result')
        end

        def dispatchRecords(records)
          send_dispatchRecords(records)
          recv_dispatchRecords()
        end

        def send_dispatchRecords(records)
          send_message('dispatchRecords', DispatchRecords_args, :records => records)
        end

        def recv_dispatchRecords()
          result = receive_message(DispatchRecords_result)
          raise result.e unless result.e.nil?
          return
        end

        def updateSchedulerAddress(e)
          send_updateSchedulerAddress(e)
          recv_updateSchedulerAddress()
        end

        def send_updateSchedulerAddress(e)
          send_message('updateSchedulerAddress', UpdateSchedulerAddress_args, :e => e)
        end

        def recv_updateSchedulerAddress()
          result = receive_message(UpdateSchedulerAddress_result)
          raise result.e unless result.e.nil?
          return
        end

        def registerWithScheduler(meta)
          send_registerWithScheduler(meta)
        end

        def send_registerWithScheduler(meta)
          send_oneway_message('registerWithScheduler', RegisterWithScheduler_args, :meta => meta)
        end
      end

      class Processor < ::Concord::Thrift::MutableEphemeralStateService::Processor 
        include ::Thrift::Processor

        def process_registerRichStream(seqid, iprot, oprot)
          args = read_args(iprot, RegisterRichStream_args)
          result = RegisterRichStream_result.new()
          begin
            result.success = @handler.registerRichStream(args.r)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'registerRichStream', seqid)
        end

        def process_deregisterRichStream(seqid, iprot, oprot)
          args = read_args(iprot, DeregisterRichStream_args)
          result = DeregisterRichStream_result.new()
          begin
            result.success = @handler.deregisterRichStream(args.r)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'deregisterRichStream', seqid)
        end

        def process_dispatchRecords(seqid, iprot, oprot)
          args = read_args(iprot, DispatchRecords_args)
          result = DispatchRecords_result.new()
          begin
            @handler.dispatchRecords(args.records)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'dispatchRecords', seqid)
        end

        def process_updateSchedulerAddress(seqid, iprot, oprot)
          args = read_args(iprot, UpdateSchedulerAddress_args)
          result = UpdateSchedulerAddress_result.new()
          begin
            @handler.updateSchedulerAddress(args.e)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'updateSchedulerAddress', seqid)
        end

        def process_registerWithScheduler(seqid, iprot, oprot)
          args = read_args(iprot, RegisterWithScheduler_args)
          @handler.registerWithScheduler(args.meta)
          return
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class RegisterRichStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        R = 1

        FIELDS = {
          R => {:type => ::Thrift::Types::STRUCT, :name => 'r', :class => ::Concord::Thrift::RichStream}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterRichStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeregisterRichStream_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        R = 1

        FIELDS = {
          R => {:type => ::Thrift::Types::STRUCT, :name => 'r', :class => ::Concord::Thrift::RichStream}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeregisterRichStream_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DispatchRecords_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        RECORDS = 1

        FIELDS = {
          RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Concord::Thrift::Record}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DispatchRecords_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateSchedulerAddress_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::Endpoint}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateSchedulerAddress_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterWithScheduler_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        META = 1

        FIELDS = {
          META => {:type => ::Thrift::Types::STRUCT, :name => 'meta', :class => ::Concord::Thrift::ComputationMetadata}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterWithScheduler_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
