#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'mutable_ephemeral_state_service'
require 'bolt_types'

module Concord
  module Thrift
    module BoltProxyService
      class Client < ::Concord::Thrift::MutableEphemeralStateService::Client 
        include ::Thrift::Client

        def updateTopology(topology)
          send_updateTopology(topology)
          recv_updateTopology()
        end

        def send_updateTopology(topology)
          send_message('updateTopology', UpdateTopology_args, :topology => topology)
        end

        def recv_updateTopology()
          result = receive_message(UpdateTopology_result)
          raise result.e unless result.e.nil?
          return
        end

        def dispatchRecords(records)
          send_dispatchRecords(records)
          recv_dispatchRecords()
        end

        def send_dispatchRecords(records)
          send_message('dispatchRecords', DispatchRecords_args, :records => records)
        end

        def recv_dispatchRecords()
          result = receive_message(DispatchRecords_result)
          raise result.e unless result.e.nil?
          return
        end

        def updateSchedulerAddress(e)
          send_updateSchedulerAddress(e)
          recv_updateSchedulerAddress()
        end

        def send_updateSchedulerAddress(e)
          send_message('updateSchedulerAddress', UpdateSchedulerAddress_args, :e => e)
        end

        def recv_updateSchedulerAddress()
          result = receive_message(UpdateSchedulerAddress_result)
          raise result.e unless result.e.nil?
          return
        end

        def registerWithScheduler(meta)
          send_registerWithScheduler(meta)
        end

        def send_registerWithScheduler(meta)
          send_oneway_message('registerWithScheduler', RegisterWithScheduler_args, :meta => meta)
        end
      end

      class Processor < ::Concord::Thrift::MutableEphemeralStateService::Processor 
        include ::Thrift::Processor

        def process_updateTopology(seqid, iprot, oprot)
          args = read_args(iprot, UpdateTopology_args)
          result = UpdateTopology_result.new()
          begin
            @handler.updateTopology(args.topology)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'updateTopology', seqid)
        end

        def process_dispatchRecords(seqid, iprot, oprot)
          args = read_args(iprot, DispatchRecords_args)
          result = DispatchRecords_result.new()
          begin
            @handler.dispatchRecords(args.records)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'dispatchRecords', seqid)
        end

        def process_updateSchedulerAddress(seqid, iprot, oprot)
          args = read_args(iprot, UpdateSchedulerAddress_args)
          result = UpdateSchedulerAddress_result.new()
          begin
            @handler.updateSchedulerAddress(args.e)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'updateSchedulerAddress', seqid)
        end

        def process_registerWithScheduler(seqid, iprot, oprot)
          args = read_args(iprot, RegisterWithScheduler_args)
          @handler.registerWithScheduler(args.meta)
          return
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class UpdateTopology_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TOPOLOGY = 1

        FIELDS = {
          TOPOLOGY => {:type => ::Thrift::Types::STRUCT, :name => 'topology', :class => ::Concord::Thrift::TopologyMetadata}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateTopology_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DispatchRecords_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        RECORDS = 1

        FIELDS = {
          RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Concord::Thrift::Record}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DispatchRecords_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateSchedulerAddress_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::Endpoint}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateSchedulerAddress_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterWithScheduler_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        META = 1

        FIELDS = {
          META => {:type => ::Thrift::Types::STRUCT, :name => 'meta', :class => ::Concord::Thrift::ComputationMetadata}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterWithScheduler_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
