#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'bolt_types'

module Concord
  module Thrift
    module MutableEphemeralStateService
      class Client
        include ::Thrift::Client

        def setState(key, value)
          send_setState(key, value)
          recv_setState()
        end

        def send_setState(key, value)
          send_message('setState', SetState_args, :key => key, :value => value)
        end

        def recv_setState()
          result = receive_message(SetState_result)
          raise result.e unless result.e.nil?
          return
        end

        def getState(key)
          send_getState(key)
          return recv_getState()
        end

        def send_getState(key)
          send_message('getState', GetState_args, :key => key)
        end

        def recv_getState()
          result = receive_message(GetState_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getState failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_setState(seqid, iprot, oprot)
          args = read_args(iprot, SetState_args)
          result = SetState_result.new()
          begin
            @handler.setState(args.key, args.value)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'setState', seqid)
        end

        def process_getState(seqid, iprot, oprot)
          args = read_args(iprot, GetState_args)
          result = GetState_result.new()
          begin
            result.success = @handler.getState(args.key)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'getState', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class SetState_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        KEY = 1
        VALUE = 2

        FIELDS = {
          KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
          VALUE => {:type => ::Thrift::Types::STRING, :name => 'value', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SetState_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetState_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        KEY = 1

        FIELDS = {
          KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetState_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
