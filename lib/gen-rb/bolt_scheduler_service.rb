#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'bolt_types'

module Concord
  module Thrift
    module BoltSchedulerService
      class Client
        include ::Thrift::Client

        def deployComputation(request)
          send_deployComputation(request)
          recv_deployComputation()
        end

        def send_deployComputation(request)
          send_message('deployComputation', DeployComputation_args, :request => request)
        end

        def recv_deployComputation()
          result = receive_message(DeployComputation_result)
          raise result.e unless result.e.nil?
          return
        end

        def getComputationSlug(computationName)
          send_getComputationSlug(computationName)
          return recv_getComputationSlug()
        end

        def send_getComputationSlug(computationName)
          send_message('getComputationSlug', GetComputationSlug_args, :computationName => computationName)
        end

        def recv_getComputationSlug()
          result = receive_message(GetComputationSlug_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getComputationSlug failed: unknown result')
        end

        def registerComputation(computation)
          send_registerComputation(computation)
          return recv_registerComputation()
        end

        def send_registerComputation(computation)
          send_message('registerComputation', RegisterComputation_args, :computation => computation)
        end

        def recv_registerComputation()
          result = receive_message(RegisterComputation_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerComputation failed: unknown result')
        end

        def killTask(taskId)
          send_killTask(taskId)
          recv_killTask()
        end

        def send_killTask(taskId)
          send_message('killTask', KillTask_args, :taskId => taskId)
        end

        def recv_killTask()
          result = receive_message(KillTask_result)
          raise result.e unless result.e.nil?
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_deployComputation(seqid, iprot, oprot)
          args = read_args(iprot, DeployComputation_args)
          result = DeployComputation_result.new()
          begin
            @handler.deployComputation(args.request)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'deployComputation', seqid)
        end

        def process_getComputationSlug(seqid, iprot, oprot)
          args = read_args(iprot, GetComputationSlug_args)
          result = GetComputationSlug_result.new()
          begin
            result.success = @handler.getComputationSlug(args.computationName)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'getComputationSlug', seqid)
        end

        def process_registerComputation(seqid, iprot, oprot)
          args = read_args(iprot, RegisterComputation_args)
          result = RegisterComputation_result.new()
          begin
            result.success = @handler.registerComputation(args.computation)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'registerComputation', seqid)
        end

        def process_killTask(seqid, iprot, oprot)
          args = read_args(iprot, KillTask_args)
          result = KillTask_result.new()
          begin
            @handler.killTask(args.taskId)
          rescue ::Concord::Thrift::BoltError => e
            result.e = e
          end
          write_result(result, oprot, 'killTask', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class DeployComputation_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Concord::Thrift::BoltComputationRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeployComputation_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetComputationSlug_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        COMPUTATIONNAME = 1

        FIELDS = {
          COMPUTATIONNAME => {:type => ::Thrift::Types::STRING, :name => 'computationName'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetComputationSlug_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterComputation_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        COMPUTATION = 1

        FIELDS = {
          COMPUTATION => {:type => ::Thrift::Types::STRUCT, :name => 'computation', :class => ::Concord::Thrift::ComputationMetadata}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterComputation_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Concord::Thrift::TopologyMetadata},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class KillTask_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TASKID = 1

        FIELDS = {
          TASKID => {:type => ::Thrift::Types::STRING, :name => 'taskId'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class KillTask_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Concord::Thrift::BoltError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
